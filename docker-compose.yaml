version: '3.8'

services:
  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_storage:/qdrant/storage
    environment:
      - QDRANT_URL=http://qdrant:6333
    networks:
      - rag_network

  # Ollama for local LLM models (FIXED)
  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    volumes:
      - ollama_data:/root/.ollama
    ports:
      - "11434:11434"
    environment:
      - OLLAMA_HOST=0.0.0.0  # FIXED: Allow external connections
      - OLLAMA_ORIGINS=*     # FIXED: Allow all origins
    networks:
      - rag_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434/api/version"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:13
    container_name: postgres-rag
    environment:
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=${POSTGRES_DB:-brahman}
      - POSTGRES_USER=${POSTGRES_USER:-admin}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-admin}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - rag_network
    restart: unless-stopped

  # PgAdmin
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@admin.com
      PGADMIN_DEFAULT_PASSWORD: admin
    ports:
      - "8080:80"
    depends_on:
      - postgres
    networks:
      - rag_network
    restart: unless-stopped

  # Streamlit Application (FIXED networking)
  streamlit:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: streamlit-rag
    environment:
      - QDRANT_URL=http://qdrant:6333          
      - OLLAMA_URL=http://ollama:11434/v1/     
      - POSTGRES_HOST=postgres
      - POSTGRES_DB=${POSTGRES_DB:-brahman}
      - POSTGRES_USER=${POSTGRES_USER:-admin}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-admin}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - PYTHONPATH=/app
    ports:
      - "8501:8501"
    depends_on:
      qdrant:
        condition: service_started
      ollama:
        condition: service_healthy    # FIXED: Wait for Ollama to be healthy
      postgres:
        condition: service_started
    volumes:
      - .:/app
    networks:
      - rag_network
    restart: unless-stopped

  # Grafana for Monitoring
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    depends_on:
      - postgres
    networks:
      - rag_network
    restart: unless-stopped

volumes:
  qdrant_storage:
  postgres_data:
  grafana_data:
  ollama_data:

networks:
  rag_network:
    driver: bridge
