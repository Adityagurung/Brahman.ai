version: '3.8'

services:
  # Qdrant Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant
    ports:
      - "${QDRANT_PORT:-6333}:6333"
      - "${QDRANT_GRPC_PORT:-6334}:6334"
    volumes:
      - qdrant_storage:/qdrant/storage
    environment:
      - QDRANT_URL=http://qdrant:6333
    networks:
      - rag_network

  # Ollama for local LLM models 
  ollama:
    image: ollama/ollama:latest
    container_name: ollama
    volumes:
      - ollama_data:/root/.ollama
    ports:
      - "${OLLAMA_PORT:-11434}:11434"
    environment:
      - OLLAMA_HOST=${OLLAMA_HOST:-0.0.0.0}
      - OLLAMA_ORIGINS=${OLLAMA_ORIGINS:-*}
    networks:
      - rag_network


  # PostgreSQL Database
  postgres:
    image: postgres:13
    container_name: postgres
    environment:
      - POSTGRES_HOST=${POSTGRES_HOST:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-Bhramana}
      - POSTGRES_USER=${POSTGRES_USER:-admin}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-admin}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - rag_network
    restart: unless-stopped

  # PgAdmin
  pgadmin:
    image: dpage/pgadmin4
    container_name: pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: ${PGADMIN_DEFAULT_EMAIL:-admin@admin.com}
      PGADMIN_DEFAULT_PASSWORD: ${PGADMIN_DEFAULT_PASSWORD:-admin}
    ports:
      - "8080:80"
    networks:
      - rag_network
    restart: unless-stopped

  # Streamlit Application 
  streamlit:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: streamlit
    environment:
      - QDRANT_URL=http://qdrant:6333
      - OLLAMA_URL=http://ollama:11434/v1/
      - POSTGRES_HOST=${POSTGRES_HOST:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-Bhramana}
      - POSTGRES_USER=${POSTGRES_USER:-admin}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-admin}
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - PYTHONPATH=/app
    ports:
      - "${STREAMLIT_PORT:-8501}:8501"
    volumes:
      - .:/app
    networks:
      - rag_network
    restart: unless-stopped

  # Grafana for Monitoring
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "${GRAFANA_PORT:-3000}:3000"
    volumes:
      - grafana_data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    networks:
      - rag_network
    restart: unless-stopped
  
  # Grafana Init (provision datasource + dashboard automatically)
  grafana-init:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: grafana-init
    environment:
      - GRAFANA_URL=http://grafana:3000
      - GRAFANA_ADMIN_USER=${GRAFANA_ADMIN_USER:-admin}
      - GRAFANA_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD:-admin}
      - POSTGRES_HOST=${POSTGRES_HOST:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-Bhramana}
      - POSTGRES_USER=${POSTGRES_USER:-admin}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-admin}
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}
    command: >
      sh -c "pip install requests python-dotenv &&
             python /app/grafana/init.py"
    networks:
      - rag_network
    restart: "no"

volumes:
  qdrant_storage:
  postgres_data:
  grafana_data:
  ollama_data:

networks:
  rag_network:
    driver: bridge